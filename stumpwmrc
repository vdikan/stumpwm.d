;; This is a -*- lisp -*- file.
(in-package :stumpwm)

(ql:quickload :slynk)                   ; Later the slynk-server will be injected

;; Set ctrl-space as prefix sequence
(set-prefix-key (kbd "C-SPC"))

;;
;; Appearance
;; ideas from https://github.com/alezost/stumpwm-config/blob/master/visual.lisp
;;
;; Message window font
;; (set-font "-xos4-terminus-medium-r-normal--20-140-72-72-c-80-iso8859-15")
;; (set-font "-*-terminus-bold-r-*-*-22-*-*-*-*-*-iso8859-*")
;; (set-font "10x20-cyrillic")
(set-font "-*-terminus-medium-r-*-*-22-*-*-*-*-*-iso10646-1")
;;
;; Colorscheme experiments:
;; https://stumpwm.github.io/git/stumpwm-git_13.html#Colors
(setf *colors*
      ;; Yellow and magenta are swapped to show keys in yellow.
      ;; '("black" "red" "green" "magenta" "blue" "yellow" "cyan" "white"))
      ;; '("#000019" "red" "#6f9fff" "magenta" "blue" "#f0f0f0" "lightskyblue" "cyan"))
      ;; Looks like non-VGA-16 codes do not appear in modules
      '("#000019" "#ff5555" "#90ee90" "#ffff44" "#00cdff" "#ffb0ff" "#00ffff" "#f0f0f0"))
(update-color-map (current-screen))     ; which other color maps to upgrade?

(defmacro my-stump-set-color (val color)
  "Similar to `set-any-color', but without updating colors."
  `(dolist (s *screen-list*)
     (setf (,val s) (alloc-color s ,color))))

(my-stump-set-color screen-fg-color "#00cdff")
(my-stump-set-color screen-bg-color "#000019")
(my-stump-set-color screen-focus-color  "#940093")
(my-stump-set-color screen-unfocus-color  "#000019")
(my-stump-set-color screen-border-color "#00cdff")
(my-stump-set-color screen-float-focus-color "#940093")
(my-stump-set-color screen-float-unfocus-color "#000019")
(update-colors-all-screens)
;;
;; Grabbed pointer
(setq
 *grab-pointer-character* 40
 *grab-pointer-character-mask* 41
 *grab-pointer-foreground* (hex-to-xlib-color "#3db270")
 *grab-pointer-background* (hex-to-xlib-color "#2c53ca"))
;;
;; Gravity
(set-normal-gravity :center)
(setf *message-window-gravity* :center)
(setf *input-window-gravity* :center)
;;
;; MSI Keyboard colors (SteelSeries)
(define-key *root-map* (kbd "s-c")   "exec msi_keyboard_colors.sh")
;;
;; Behaviour
;;
;;; Message after a part of key sequence
;; Idea from <https://github.com/stumpwm/stumpwm/wiki/FAQ>.
;;
(defun key-seq-msg (key key-seq cmd)
  "Show a message with current incomplete key sequence."
  (declare (ignore key))
  (or (eq *top-map* *resize-map*)
      (stringp cmd)
      (let ((*message-window-gravity* :center))
        (message "~A" (print-key-seq (reverse key-seq))))))

(add-hook *key-press-hook* 'key-seq-msg)
;;
;; Clear rules
(clear-window-placement-rules)
;;
;;Set the mouse policy to focus follows mouse;
(setf *mouse-focus-policy* :click) ;; :click, :ignore, :sloppy
;;
;; Shortcuts to split windows: same as in tmux
(define-key *root-map* (kbd "V")   "hsplit")
(define-key *root-map* (kbd "H")   "vsplit")
;;
;; Exec shortcut
(define-key *root-map* (kbd "c")   "exec")
(define-key *root-map* (kbd "C-c") "exec")

;; Banish mouse cursor
(define-key *root-map* (kbd "C-v") "banish")

;; emacs client mode
(defcommand invoke-emacsclient () ()
  "Invoke emacsclient or run emacs."
  (run-or-raise "exec emacsclient -c -a emacs" '(:title "emacs")))

(define-key *root-map* (kbd "e")   "invoke-emacsclient")
(define-key *root-map* (kbd "C-e") "invoke-emacsclient")
(define-key *root-map* (kbd "s-e") "invoke-emacsclient")

;; Launch shell in emacs
(defcommand invoke-emacs-shell () ()
            "Raise emacs, launch shell."
            (invoke-emacsclient)
            (send-meta-key (current-screen) (kbd "M-x"))
            (window-send-string "shell")
            (send-meta-key (current-screen) (kbd "RET")))
(define-key *root-map* (kbd "t") "invoke-emacs-shell")
(define-key *root-map* (kbd "C-t") "invoke-emacs-shell")

;; Shortcut for mate (gnome) terminal
(defcommand invoke-term-command () ()
  ;; (run-or-raise "exec mate-terminal" '(:title "Terminal"))
  (run-or-raise "exec xterm" '(:title "xterm")))
(define-key *root-map* (kbd "F12") "invoke-term-command")

;; browser
(defprogram-shortcut invoke-browser :command "sensible-browser"
                     :props '(:role "browser")
                     :map *root-map* :key (kbd "b"))
(define-key *root-map* (kbd "C-b") "invoke-browser")

;; Lock screen and Suspend
(define-key *root-map* (kbd "M-l") "exec mate-screensaver-command -l && systemctl suspend")
;(define-key *root-map* (kbd "M-l") "exec systemctl suspend")
;; Screenshot
(define-key *root-map* (kbd "M-s") "exec mate-screenshot -i")
;;
;; prompt the user for an interactive command. The first arg is an
;; optional initial contents.
(defcommand colon1 (&optional (initial "")) (:rest)
            (let ((cmd (read-one-line (current-screen) ": " :initial-input initial)))
              (when cmd
                (eval-command cmd t))))
;;
;; Adjust brightness - now in redshift's settings
(define-key *root-map* (kbd "M-b") "colon1 exec xbacklight -set ")
;;
;; Browse somewhere
(define-key *root-map* (kbd "o") "colon1 exec sensible-browser https://www.")
;;
;; Web Jumps (for search engines)
(defmacro make-web-jump (name prefix)
  `(defcommand ,(intern name) (search) ((:rest ,(concatenate 'string name " query: ")))
    (substitute #\+ #\Space search)
    (run-shell-command (concatenate 'string "sensible-browser " ,prefix search))))

(make-web-jump "google-search"    "https://www.google.ru/search?q=")
(make-web-jump "academia-search"  "https://www.google.ru/scholar?q=")
(make-web-jump "goodreads-search" "https://www.goodreads.com/search?q=")
(make-web-jump "libgen-search"    "https://libgen.is/search.php?req=")
(make-web-jump "yandex-search"    "https://yandex.ru/search/?text=")
(make-web-jump "video-search"     "https://www.youtube.com/results?search_query=")
(make-web-jump "imdb-search"      "https://www.imdb.com/find?q=")
(make-web-jump "kinopoisk-search" "https://www.kinopoisk.ru/index.php/kp_query=")
(make-web-jump "rutracker-search" "https://www.rutracker.org/forum/tracker.php?nm=")
(make-web-jump "picture-search"   "https://www.yandex.ru/images/search/?text=")

(defvar *web-search-bindings*
  (let ((m (make-sparse-keymap)))
    (define-key m (kbd "/") "google-search")
    (define-key m (kbd "g") "google-search")
    (define-key m (kbd "a") "academia-search")
    (define-key m (kbd "b") "goodreads-search")
    (define-key m (kbd "l") "libgen-search")
    (define-key m (kbd "y") "yandex-search")
    (define-key m (kbd "v") "video-search")
    (define-key m (kbd "i") "imdb-search")
    (define-key m (kbd "k") "kinopoisk-search")
    (define-key m (kbd "t") "rutracker-search")
    (define-key m (kbd "p") "picture-search")
    m))

(define-key *root-map* (kbd "C-/") '*web-search-bindings*)
(define-key *root-map* (kbd "/")   '*web-search-bindings*)

;; Touchpad on-off. Toggle icon is painted on my F3.
(define-key *root-map* (kbd "M-F3") "exec synclient TouchpadOff=1")
(define-key *root-map* (kbd "C-F3") "exec synclient TouchpadOff=0")

;; Contrib add-ons
;; Installed in the ~/.stumpwm.d/modules/ as written in:
;; https://github.com/stumpwm/stumpwm/wiki/Modules
;;

;; GnuPass interface. Needs full path stored in $PASSWORD_STORE_DIR
(load-module "pass")
(define-key *root-map* (kbd "Z") "pass-copy-menu")

;; Notifications - first contrib module to load
(load-module "notifications")
(define-key *root-map* (kbd "N") 'notifications:*notifications-map*)

;; Keyboard layouts
(load-module "kbd-layouts")
(kbd-layouts::keyboard-layout-list "us" "ru")

;; Amixer
(load-module "amixer")
(define-key *top-map* (kbd "XF86AudioLowerVolume") "amixer-Master-1-")
(define-key *top-map* (kbd "XF86AudioRaiseVolume") "amixer-Master-1+")
(define-key *top-map* (kbd "XF86AudioMute") "amixer-Master-toggle pulse")

;; Alert-Me-At utility command
(load-module "alert-me")

;;
;; Modeline & Tray
;;

;; WiFi
(load-module "wifi")

;; CPU
(load-module "cpu")
(setf cpu::*cpu-modeline-fmt* "%c%t")

;; Mem
(load-module "mem")
(setf mem::*mem-modeline-fmt* "MEM:%p")

;; Tray
(load-module "stumptray")

(setf *mode-line-foreground-color* "#f0f0ff")
(setf *mode-line-background-color* "#000019")
(setf *mode-line-border-color* "#00cdff")
;;
;; (toggle-mode-line (current-screen) (current-head))
(setf stumpwm:*screen-mode-line-format*
      (list "%d ^4||^n "
            "%I ^4||^n "
            "BATT: " '(:eval (run-shell-command "upower -i $(upower -e | grep \'BAT\') | grep percentage | awk \'\{printf $(NF)\}\'" t))
            " ^4|^n "
            "%M^4|^n "
            "%C ^4||^n "
            "^B^6%N^n"))

(setf *mode-line-position* :bottom)
;;
(defcommand show-tray () ()
            "Shortcut for modeline and stumptray."
            (run-commands "mode-line" "stumptray"))

;;
;; Common commands and menu shortcuts
;; Now with App-Menu from Contrib
;;

(load-module "app-menu")

;; Weather reports with wttr.in and curl
(defvar wttr-extra-options "ATFm")

(defcommand wttr-in (&optional place days)
  ((:string "Place  (blank for current location): ")
   (:number "Duration (0-2, 0 short for just now): "))
  (let ((*message-window-padding* 16)
        (*message-window-y-padding* 16)
        (*suppress-echo-timeout* t)
        (*message-window-gravity* :top)
        (place (or place ""))
        (days (or days 0)))
    (message
     (uiop:run-program
      (format nil "curl wttr.in/~a?~a~a"
              place days wttr-extra-options)
      :output :string))))

(defcommand wttr-in-sabadell () () (wttr-in "Sabadell" 1))
(defcommand wttr-in-moscow () () (wttr-in "Moscow" 1))
(defcommand wttr-in-saarbrucken () () (wttr-in "Saarbrucken" 1))

;; Golden raftio
(load-module "swm-golden-ratio")

;; 2-Display controls
(defvar output-main "eDP-1"
  "The main output name of the device")

(defvar output-ext "HDMI-1"
  "The external output name of the device")

(defcommand set-output-main-display () ()
  (run-commands
   (format nil "exec xrandr --output ~a --auto --output ~a --off"
           output-main output-ext))
  (refresh-heads))

(defcommand set-output-ext-display () ()
  (run-commands
   (format nil "exec xrandr --output ~a --off --output ~a --auto"
           output-main output-ext))
  (refresh-heads))

(defcommand set-output-two-displays () ()
  (run-commands
   (format nil "exec xrandr --output ~a --auto --output ~a --auto --right-of eDP-1"
           output-main output-ext))
  (refresh-heads))

;; Utils shortcuts definitions

(defcommand openfortigui () ()
  (run-or-raise "openfortigui" '(:class "OpenFortiGUI")))

(defcommand bluetooth () ()
  (run-or-raise "blueman-manager" '(:class "Bluetooth Devices")))

(defcommand ebook-reader () ()
  (run-or-raise "evince" '(:class "Evince")))

;; Stock price query interface
;;
;; (load-module "stocks-api")

;; App-Menu Setup

(setf app-menu:*app-menu*
      `(("Weather →"
         ("Quick"      wttr-in)
         ("@ Home"     wttr-in-sabadell)
         ("@ Moscow"   wttr-in-moscow)
         ("@ Saarland" wttr-in-saarbrucken))
        ;; ("Stocks →" stocks-api:display-stocks-menu)
        ("Apps →"
         ("EReader" ebook-reader)
         ("TeleCon →"
          ("Zoom"  "zoom")
          ("Teams" "teams")
          ("Skype" "skypeforlinux")))
        ("Connections →"
         ("Bluetooth" bluetooth)
         ("OpenFortiGUI" openfortigui))
        ("Displays →"
         ("Golden Ratio" swm-golden-ratio:toggle-golden-ratio)
         ("Solo Main" set-output-main-display)
         ("2 Displays" set-output-two-displays)
         ("Solo External" set-output-ext-display))))

(define-key *root-map* (kbd ",") "show-menu")

;;
;; My custom modules playground
;;
;; Experimental: my custom UI utils
;;
(load-module "ui-extras")

(defcommand exec-with-pager (&optional (initial "")) (:rest)
  "Run shell command and output result as text through the Pager UI."
  (let ((cmd (read-one-line (current-screen) "[ Pager ]<-: " :initial-input initial)))
    (when cmd
      (ui-extras:display-pager-text
       (uiop:run-program cmd :output '(:string :stripped t))))))
(define-key *root-map* (kbd "C") "exec-with-pager")

;; Interface for SiegeTower: my ColeslaW blog instance
;;
(load-module "coleslaw-ui")

(setf coleslaw-ui:*blog-dir* #p"~/siegetower/")

(define-key *root-map* (kbd "s") 'coleslaw-ui:*coleslaw-ui-map*)

;; My Pomodoro tracker in Stump
(load-module "swm-pomodoro")

(defvar *swm-pomodoro-bindings*
  (let ((m (make-sparse-keymap)))
    (define-key m (kbd "d") "pomodoro-status")
    (define-key m (kbd "s") "pomodoro-start-timer")
    (define-key m (kbd "c") "pomodoro-cancel-timer")
    (define-key m (kbd "r") "pomodoro-reset")
    m))

(define-key *root-map* (kbd ".") '*swm-pomodoro-bindings*)

;; Kbmap trigger
(define-key *root-map* (kbd "C-`") "exec setxkbmap -option ctrl:swapcaps")

;;
;; Startup commands
;;
(defvar *stumpwm-first-load* t
  "Indicates if it is a startup first load of stumpwmrc file.")

(defun exec-startup-commands ()
  "Execute sequence of startup commands if it's the first time stumpwmrc is loaded."
  (if *stumpwm-first-load*
      (progn
        (setf *stumpwm-first-load* nil)
        (slynk:create-server :port 4096 :dont-close t) ; <- Launch Slynk server
        (run-commands "mode-line" "stumptray")
        (run-commands "exec setxkbmap -option ctrl:swapcaps")
        (run-commands "exec emacs --daemon")
        (run-commands "exec mate-screensaver")
        (run-commands "exec redshift")
        (run-commands "exec feh --bg-fill ~/Desktop/wallpaper.png")
        (run-commands "exec nm-applet")))) ; network-manager tray applet
        ;; (run-commands "exec modprobe btusb && blueman-applet") ; bluetooth kernel module and applet


(exec-startup-commands)                 ; On that merry chord, end setting up StumpWM
